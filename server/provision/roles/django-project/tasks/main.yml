---

- stat: path={{ backend }}/manage.py
  register: project

- stat: path={{ backend }}/requirements.txt
  register: project_requirements

- stat: path={{ backend }}/fixtures.json
  register: project_fixtures

- name: A project will exist.
  shell: . {{ backend_env }}/bin/activate && django-admin.py startproject project . chdir={{ backend }}
  when: project.stat.exists is not defined or project.stat.exists == False

- name: A project requirements file will exist.
  shell: . {{ backend_env }}/bin/activate && pip freeze > requirements.txt chdir={{ backend }}
  when: project_requirements.stat.exists is not defined or project_requirements.stat.exists == False

- name: A project data fixtures file will exist.
  shell: . "[]" > fixtures.json chdir={{ backend }}
  when: project_fixtures.stat.exists is not defined or project_fixtures.stat.exists == False

- name: Project requirements shall be installed.
  pip: requirements={{ backend }}/requirements.txt virtualenv={{ backend_env }}

- name: Project schema shall be applied to database engine.
  shell: . {{ backend_env }}/bin/activate && python manage.py migrate chdir={{ backend }}

- name: Project database will contain fixture data.
  shell: . {{ backend_env }}/bin/activate && python manage.py loaddata fixtures.json chdir={{ backend }}

- name: Ensure STATIC_URL points to server assets.
  script: set_settings_variable.sh -d {{ backend }}/project -k "STATIC_URL" -v "'\/static\/backend\/'"

- name: Ensure STATIC_ROOT is set in project settings.
  script: set_settings_variable.sh -d {{ backend }}/project -k "STATIC_ROOT" -v "os.path.join(BASE_DIR, 'static')"

- name: Project static files will be collected.
  shell: . {{ backend_env }}/bin/activate && python manage.py collectstatic --noinput chdir={{ backend }}
